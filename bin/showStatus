#! /usr/local/bin/bash


###############################################################################
# get user defined globals
###############################################################################
. ${0%/*}/../etc/server.conf


###############################################################################
# routines for auditing the backups
###############################################################################
backupStatus () {
    local targetHost="$1"
    local files
    for f0 in $STORAGE_ROOT/*; do
        [ ! -d "$f0" ] && continue
        [ "$targetHost" ] && [ "${f0##*/}" != "$targetHost" ] && continue
        for f1 in $f0/*; do
            [ ! -d "$f1" ] && continue
            f2=$f1/stats
            [ -f "$f2" ] && files="$files $f2"
            f2=$f1/${f1##*/}_WIP
            [ -d "$f2" ] && files="$files $f2"
        done
    done

    local curHost
    local host
    local share
    local nwords
    local line
    for f in $files; do
        line=`$ECHO $f | $SED -e 's/^\///' | tr '/' ' '`
        nwords=`$ECHO $line | $WC -w`
        host=`$ECHO $line | $CUT -d ' ' -f $(( nwords - 2 ))`
        share=`$ECHO $line | $CUT -d ' ' -f $(( nwords - 1 ))`
        if [ x$host != x$curHost ]; then
            $ECHO "$host"
            curHost=$host
        fi
        if `$ECHO $f | $GREP -q -v '_WIP$'`; then
            $PRINTF "    %-25s " $share
            $ECHO `$TAIL -1 $f | $SED -e 's/[^ ]*$//'`   #get last line of stats file and remove the trailing server/share
        fi
        if `$ECHO $f | $GREP -q '_WIP$'`; then
            $PRINTF "    %-15s %s\n" $share "FAILURE WIP file found: $f "
        fi
    done

    #show available space on dataset
    $ECHO =====
    case $SYSTEM_TYPE in
        linux)
            dfResult=`df -h ${STORAGE_ROOT} | $TAIL -1`
            $ECHO "Space = `$ECHO ${dfResult} | $CUT -d ' ' -f 4` of `$ECHO ${dfResult} | $CUT -d ' ' -f 2`"
            ;;
        bsd)
            $PRINTF "Space = %s of %s (cap: %s  dedup: %s)\n" `zpool list -Ho free  $ROOT_POOL` \
                                                              `zpool list -Ho size  $ROOT_POOL` \
                                                              `zpool list -Ho cap   $ROOT_POOL` \
                                                              `zpool list -Ho dedup $ROOT_POOL`
            ;;
    esac



    #show errors logged to stats files
    local failureStatus=0
    local failureWip=0
    local failure23=0
    local failureVM=0
    local failurePerm=0
    for f in $files; do
        if [ -f "$f" ] && `$TAIL -1 $f | $GREP -q FAIL` ; then
            failureStatus=$(( failureStatus + 1 ))
        elif [ -d "$f" ]; then
            failureWip=$(( failureWip + 1 ))
	elif [ -f "$f" ] && `$TAIL -1 $f | $GREP -q "rc: 23"` ; then
	    failure23=$(( failure23 + 1 ))
	elif [ -f "$f" ] && `$TAIL -1 $f | $GREP -q "size: 2.0k"` ; then
	   failureVM=$(( failureVM + 1 ))
	elif [ -f "$f" ] && `$TAIL -1 $f | $GREP -q "rc: 1"` ; then
           failurePerm=$(( failurePerm + 1 ))
        fi
    done
    if [ $((failureStatus + failureWip + failureVM + failure23 + failurePerm)) -gt 0 ]; then
        $ECHO =====
        $ECHO "Stat failures found = $failureStatus"
        $ECHO "WIP    failures found = $failureWip"
	$ECHO "VM     failures found = $failureVM"
        $ECHO "rc: 23 failures found = $failure23"
	$ECHO "Access failures found = $failurePerm"
	exit 1
    fi
}


###############################################################################
# main
###############################################################################
case ${0##*/} in      #see how we are called
    showStatus)
        backupStatus $*
        ;;
esac

