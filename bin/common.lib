################################################################################
# shared application globals
################################################################################

JOB_STATUS_DIR_SUFFIX=".status"
#-------------------------------------------------------
# variables used in job control status files are:
#   curTimeStamp           in UTC seconds since epoch
#   curState               SUCCESS, FAILURE
#   lastSuccessTimeStamp   in UTC seconds since epoch
#   lastFailureTimeStamp   in UTC seconds since epoch
#   lastSuccessDate        in UTC +${DATE_FORMAT}z format
#   lastFailureDate        in UTC +${DATE_FORMAT}z format
#-------------------------------------------------------
JOB_MODLIST_SUFFIX=".modList"
JOB_MODLIST_STATUS="%modList"


#-------------------------------------------------------
# When a target system is using zfs it has the option of supplying its data to
# a backupGT_server by sending a zfs snapshot.  When received by the backupGT_server
# the snapshot will be labelled with a zfs user property (ZFS_USER_PROP) to
# indicate that the snapshot is a backup of some target and not a local zfs
# dataset.  When (and if) the server itself is backed up it is important that no
# additional snapshots are made as they will not have existed on the originating
# target (a snapshot such as this should be empty anyways as no changes should
# be being made to a backed-up data set).
#-------------------------------------------------------
ZFS_UPROP_IS_BACKUP="backupgt:is_backup"   # user prop to mark dataset as being a backup (yes or no)
ZFS_UPROP_METHOD="backupgt:method"         # method by which data was received


################################################################################
# date and timestamp manipulations
################################################################################
DATE_FORMAT="%Y.%m.%d-%H%M%S"

timeStamp2Date() {
    local ts=${1%z}
    case $SYSTEM_TYPE in
        linux) $DATE -d  @${ts}   +${DATE_FORMAT}z ;;
        bsd)   $DATE -jf %s ${ts} +${DATE_FORMAT}z ;;
    esac
}


date2timeStamp() {
    local date=${1%z}
    case $SYSTEM_TYPE in
        linux)
             dayPart=` $ECHO $date | $SED 's/^\([0-9][0-9][0-9][0-9]\).\([0-9][0-9]\).\([0-9][0-9]\).*/\1\2\3/'`
             timePart=`$ECHO $date | $SED 's/.*\([0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)$/\1 \2 \3/'`
             h=${timePart%% *}
             m=${timePart#* }; m=${m% *}
             s=${timePart##* }
             secs=$(( h * 3600 + m * 60 + s ))
             $DATE -u --date "$dayPart $secs sec" "+%s"
             ;;
        bsd)
             $DATE -jf "${DATE_FORMAT}" "${date}" "+%s"
             ;;
    esac
}


dateDiff () {
    case $1 in
        -s)   sec=1;      shift;;
        -m)   sec=60;     shift;;
        -h)   sec=3600;   shift;;
        -d)   sec=86400;  shift;;
        *)    sec=86400;;
    esac
    dte1=$(date2timeStamp $1)
    dte2=$(date2timeStamp $2)
    diffSec=$((dte2-dte1))
    if [ $diffSec -lt 0 ]; then abs=-1; else abs=1; fi
    echo $((diffSec/sec*abs))
}


dateDiffFmt () {
    local dte1="$1"
    local dte2="$2"
    local diffSec=`dateDiff -s "$1" "$2"`
    local days=$(( diffSec / 86400 ));  diffSec=$(( diffSec - days * 86400 ))
    local hrs=$((  diffSec / 3600  ));  diffSec=$(( diffSec - hrs  * 3600  ))
    local mins=$(( diffSec / 60    ));  diffSec=$(( diffSec - mins * 60 ))
    local secs=$(( diffSec         ));
    printf "%d.%02d.%02d.%02d" $days $hrs $mins $secs
}


isDateStampTooOld () {
    #-------------
    # given an event dateStamp determine if it is older than the specified maxAge
    # where maxAge is an interger number of minutes
    #-------------
    local eventDateStamp=${1%z}
    local maxAge=$2

    local curDS=`$DATE -u +${DATE_FORMAT}`
    local elapsed=`dateDiff -m $eventDateStamp $curDS $curTs - $eventTs`
echo cur=$curDS     event=$eventDateStamp     `dateDiffFmt $eventDateStamp $curDS`
echo elapsed=$elapsed   max=$maxAge
[ "$elapsed" -gt "$maxAge" ] && echo yes too old || echo not too old
    [ "$elapsed" -gt "$maxAge" ] && return 0 || return 1
}


################################################################################
# shared shell functions
################################################################################
parseAssignment() {
    #-------------
    # find a variable assignment in a string and return the value assigned
    # to the specified variable assuming an input string of the form
    #     var_1=val_1  var_2=val_2 ...
    # each var=val is separated from others by [:blank:]space
    # if a value needs to have embedded whitespace then the whitespace can
    #     be encoded with an ascii US (unit separator \037 \x1F), which will
    #     be decoded with a space before the value is returned
    #-------------
    local var="$1"

    #sed method: first delete any lines not containing $var
    #            then get the value
    #            then convert any \037 chars to spaces
    $SED -e "/${var}=/!d"                          \
         -e "s/^.*${var}=\([^[:blank:]]*\).*/\1/"  \
         -e "`$PRINTF 's/\037/ /g'`"
}


makeAssignment() {
    #-------------
    # set a variable assignment in a string (stdin) to the specified variable
    # assuming an input string of the form
    #     var_1=val_1  var_2=val_2 ...
    # each var=val is separated from others by [:blank:]space
    # if the value itself contains [:blank:]space then each occurance will be
    #     replaced with an ascii US (unit separator \037 \x1F)
    #-------------

    local var="$1"
    local value="$2"

    local encodePattern="`$PRINTF 's/[[:blank:]]/\037/g'`"
    value="`$ECHO \"$value\" | $SED -e $encodePattern`"

    #first delete any occurance of the variable $var, then append assignment
    $SED -e "s/${var}=[^[:blank:]]*//" \
         -e "s/$/ ${var}=${value}/"    \
         -e "s/^ //"
}


delAssignment() {
    #-------------
    # remove a variable assignment from a string (stdin)
    # assuming an input string of the form
    #     var_1=val_1  var_2=val_2 ...
    # each var=val is separated from others by [:blank:]space
    #-------------

    local var="$1"

    #delete any occurance of the variable $var
    $SED -e "s/${var}=[^[:blank:]]*//"
}


checkRunningUser () {
    #-------------
    # ensure that the script is being run by the user who own the script
    #   if yes: set the USER_NUM and GROUP_NUM global variables
    #   if no:  print error and exit
    #-------------

    local opt

    case $SYSTEM_TYPE in
        linux) opt="-c" ;;
        bsd)   opt="-f" ;;
    esac

    if [ `$STAT $opt %u -L $0` -ne `$ID -u` ]; then
        $ECHO "Error: $0 can only be run by its owner (`$STAT $opt %U -L $0`)."
        exit 1
    fi

    USER_NUM=`$ID -nu`
    GROUP_NUM=`$ID -ng`
}


###############################################################################
# terminal decorations
###############################################################################
if [ -t 1 ]; then
    NORMAL="`tput sgr0`"
    RED="`tput setaf 1`"
    GREEN="`tput setaf 2`"
    YELLOW="`tput setaf 3`"
    BLUE="`tput setaf 4`"
    MAGENTA="`tput setaf 5`"
    CYAN="`tput setaf 6`"
    WHITE="`tput setaf 7`"
    BOLD="`tput bold`"
    REVERSE="`tput rev`"
    ULINE="`tput smul`"
fi



################################################################################
# Shell scripting notes
################################################################################

#-------------
#- accessing return code from command that is part of a filter
#- bash has PIPESTATUS but for other shells ...
#-------------
#   Here's a way to do it by making your own (named) pipe.
# 
#   $ mkfifo pipe #make a pipe, named "pipe"
#   $ postprocesor_that_succeeds < pipe &  #blocks until a program writes to pipe
#   $ mycmd_that_fails > pipe
# 
#   To make sure this worked, I did this:
#
#   $ mkfifo pipe
#   $ cat < pipe &
#   $ bash #start a new shell, just for the exit value
#   $ exit 2 > pipe #exit out of new shell
#   $ echo $? #back in first shell
#   2
#

#-------------
#- cool example of using advanced redirection to merge the
#- lines of two files ($1 and $2) on a line by line basis
#-------------
#   while read f1 <&7
#   do
#       read f2 <&8
#       echo $f1 $f2
#   done \
#       7<$1 \
#       8<$2

