################################################################################
# shared application globals
################################################################################
DATE_FORMAT="%Y.%m.%d-%H%M%S"
TS_FORMAT="%s"

JOB_STATUS_DIR_SUFFIX=".status"
#-------------------------------------------------------
# variables used in job control status files are:
#   curTimeStamp           in UTC seconds since epoch
#   curState               SUCCESS, FAILURE
#   lastSuccessTimeStamp   in UTC seconds since epoch
#   lastFailureTimeStamp   in UTC seconds since epoch
#   lastSuccessDate        in UTC +${DATE_FORMAT}z format
#   lastFailureDate        in UTC +${DATE_FORMAT}z format
#-------------------------------------------------------
JOB_MODLIST_SUFFIX=".modList"
JOB_MODLIST_STATUS="%modList"



################################################################################
# shared shell functions
################################################################################
timeStamp2Date() {
    local ts=${1%z}
    case $SYSTEM_TYPE in
        linux) $DATE -d  @${ts}   +${DATE_FORMAT}z ;;
        bsd)   $DATE -jf %s ${ts} +${DATE_FORMAT}z ;;
    esac
}

date2timeStamp() {
    local date=${1%z}
    case $SYSTEM_TYPE in
        linux) ;;  #todo
        bsd)   $DATE -jf +${DATE_FORMAT} ${date} +%s ;;
    esac
}

parseAssignment() {
    #-------------
    # find a variable assignment in a string (stdin) and return the value
    # assigned to the specified variable assuming an input string of the form
    #     var_1=val_1  var_2=val_2 ...
    #-------------

    local var=$1

    #awk method (not always available in restricted environments)
    #$AWK '{ print $0 }' RS=' ' | $GREP "${var}=" \
    #    | $AWK '{ print substr($0, index($0, "=")+1) }'

    #sed method: first delete any lines not containing $var, then get the value
    $SED -e "/${var}/!d" \
         -e "s/^.*${var}=\([^[:space:]]*\).*/\1/"
}


makeAssignment() {
    #-------------
    # set a variable assignment in a string (stdin) to the specified variable
    # assuming an input string of the form
    #     var_1=val_1  var_2=val_2 ...
    #-------------

    local var=$1
    local value=$2

    #first delete any occurance of the variable $var, then append assignment
    $SED -e "s/${var}=[^[:space:]]*//" \
         -e "s/$/ ${var}=${value}/"    \
         -e "s/^ //"
}


checkRunningUser () {
    #-------------
    # ensure that the script is being run by the user who own the script
    #   if yes: set the USER_NUM and GROUP_NUM global variables
    #   if no:  print error and exit
    #-------------

    local opt

    case $SYSTEM_TYPE in
        linux) opt="-c" ;;
        bsd)   opt="-f" ;;
    esac

    if [ `$STAT $opt %u -L $0` -ne `$ID -u` ]; then
        $ECHO "Error: $0 can only be run by its owner (`$STAT $opt %U -L $0`)."
        exit 1
    fi

    USER_NUM=`$ID -nu`
    GROUP_NUM=`$ID -ng`
}


isTimeStampTooOld () {
    #-------------
    # given an event timestamp (in UTC seconds since epoch) determine if it is older
    # than the specified maxAge
    #-------------
    local eventTs=${1%z}
    local maxAge=$2

    curTs=`$DATE -u +${TS_FORMAT}`
    elapsed=`$EXPR $curTs - $eventTs`
    [ "$elapsed" -gt "$maxAge" ] && return 0 || return 1
}


###############################################################################
# terminal decorations
###############################################################################
if [ -t 1 ]; then
    NORMAL="`tput sgr0`"
    RED="`tput setaf 1`"
    GREEN="`tput setaf 2`"
    YELLOW="`tput setaf 3`"
    BLUE="`tput setaf 4`"
    MAGENTA="`tput setaf 5`"
    CYAN="`tput setaf 6`"
    WHITE="`tput setaf 7`"
    BOLD="`tput bold`"
    REVERSE="`tput rev`"
    ULINE="`tput smul`"
fi



################################################################################
# Shell scripting notes
################################################################################

#-------------
#- accessing return code from command that is part of a filter
#- bash has PIPESTATUS but for other shells ...
#-------------
#   Here's a way to do it by making your own (named) pipe.
# 
#   $ mkfifo pipe #make a pipe, named "pipe"
#   $ postprocesor_that_succeeds < pipe &  #blocks until a program writes to pipe
#   $ mycmd_that_fails > pipe
# 
#   To make sure this worked, I did this:
#
#   $ mkfifo pipe
#   $ cat < pipe &
#   $ bash #start a new shell, just for the exit value
#   $ exit 2 > pipe #exit out of new shell
#   $ echo $? #back in first shell
#   2
#

#-------------
#- cool example of using advanced redirection to merge the
#- lines of two files ($1 and $2) on a line by line basis
#-------------
#   while read f1 <&7
#   do
#       read f2 <&8
#       echo $f1 $f2
#   done \
#       7<$1 \
#       8<$2

