#! /usr/local/bin/bash

###############################################################################
# This script spawns multiple copies of itself and each copy pulls and runs
# the job at the top of the queue (priority / FIFO order).
#
###############################################################################


###############################################################################
# include user defined globals and the common library
###############################################################################
. ${0%/*}/../etc/server.conf
. ${0%/*}/common.lib

# redefine $SUDO to include the configured user
SUDO=""
if [ -n "$SUDO_USER" ]; then
    SUDO="$SUDO -u $SUDO_USER"
fi


###############################################################################
# globals
###############################################################################
LAST_MODIFIED_DATE='2012.10.21'


###############################################################################
# process options
###############################################################################
printFullUsage() {
    $ECHO "###############################################################################"
    $ECHO "# runQueue (part of the backupGT suite)"
    $ECHO "# Author: Garry Thuna"
    $ECHO "# Created: 11/10/2009"
    $ECHO "# Last modified: ${LAST_MODIFIED_DATE}"
    $ECHO "###############################################################################"
    $ECHO "Usage: $0 [-v] [-D] [<runnerNumber>]"
    $ECHO "   This script spawns multiple copies of itself and each copy pulls and runs"
    $ECHO "   the job at the top of the queue (priority / FIFO order)."
    $ECHO "Options:"
    $ECHO "   -v   Print verbose output"
    $ECHO "   -D   Print debugging output, and do not spawn another instance prior to "
    $ECHO "        exiting."
    $ECHO "   runnerNumber: a unique id to identify an instance of this script"
    $ECHO "                 from other instances. runnerNumber will be in the"
    $ECHO "                 range 1 to QUEUE_RUNNERS"
    $ECHO "   if called without the runnerNumber parameter then QUEUE_RUNNERS"
    $ECHO "   instances will be spawned each with a distinct runnerNumber"
    $ECHO 
    $ECHO " If the queued job does not specify a module then the job will be invoked"
    $ECHO " with the -j option, and if a module is specified the job will be invoked"
    $ECHO " with the -s option."
    $ECHO 
    $ECHO " All job files must accept additional command line parameters and in turn "
    $ECHO " append them to the command line when calling backupGT.  Furthermore the"
    $ECHO " return code from the job file should be 0 for success, non-zero for failure"
    $ECHO " as returned from backupGT."
    exit 1
}


printMiniUsage() {
    $ECHO "Usage: $0 [<queueName>]"
}


parseOptions() {
    local opSsupplied
    while getopts ":vD" arg; do
        case $arg in
            D) DEBUG=$(( DEBUG + 1 )) 
               ;&
            v) VERBOSE="1"
               ;;
            :) $ECHO "Option -${OPTARG} requires an argument." 1>&2
               exit 1
               ;;
            *) $ECHO "Option -${OPTARG} not recognized as a valid option." 1>&2
               exit 1
               ;;
        esac
    done
    COMMAND_LINE_PARMS=( "${@:$OPTIND}" )  #save rest of command line as array
}


###############################################################################
# main
#   - create a queueRunner specific mutex in the queue (mark with a timestamp)
#   - wait for potential competing queueRunners to create their mutex
#   - check for the existence of other mutexes in the queue
#   - if a mutex exists determine the job for which it marks as running
#       - if the job is still running then cleanup and quit
#   - remove any stale mutexes from the queue
#   - read the head of the queue and 
#       - launch the job to which it refers
#       - store the process info with the mutex
#   - wait for the job to complete
#       - remove the mutex
###############################################################################
checkRunningUser
parseOptions "$@"; set -- "${COMMAND_LINE_PARMS[@]}"

[ "$VERBOSE" ] && $ECHO 
[ "$VERBOSE" ] && $ECHO 

case "$#" in
    0) for qrNum in `$SEQ $QUEUE_RUNNERS`; do
           [ "$VERBOSE" ] && $ECHO "${0}: spawning queueRunner $qrNum"
           $0 `[ "$VERBOSE" ] && $ECHO "-v"` \
              `[ "$DEBUG" ]   && $ECHO "-D"` ${qrNum} &
       done
       exit 0
       ;;

    1) qrNum="$1"
       ;;

    *) printFullUsage 1>&2
       ;;
esac


#----------------
# check that the queueDir exists
#----------------
queueDir="$QUEUE_ROOT"
if [ ! -d "$queueDir" ]; then
    $ECHO "$0: ERROR: queue direcotry '$queueDir' does not exist"
    exit 1
fi


#----------------
# create a mutex in the queue (mark with a timestamp)
#----------------
timeStamp=`$DATE -u +${DATE_FORMAT}z`
thisMutex=`$MKTEMP $queueDir/mutex_${qrNum}_${timeStamp}_XXXXX`
$ECHO "$$" > $thisMutex
$SLEEP 1


#----------------
# see if thisMutex is governing for this qrNum
#----------------
for mutex in $queueDir/mutex_${qrNum}*; do
    [ "$VERBOSE" ] && $ECHO "queueRunner_$qrNum (pid=$$) checking mutex $mutexPid"
    if [ "$mutex" = $thisMutex ]; then
        #this mutex is controlling
        break
    fi
    mutexPid=`$CAT $mutex`
    if $PS -o pid,command -p $mutexPid | $GREP -q "^$mutexPid"; then
        [ "$VERBOSE" ] && $ECHO "queueRunner_$qrNum (pid=$$) another istance is controlling - exiting"
        $RM -f $thisMutex
        exit 0
    else
        # queueRunner is defunct, remove stale mutex
        $RM -f $mutex
    fi
done
[ "$VERBOSE" ] && $ECHO "queueRunner_$qrNum (pid=$$) is controlling mutex=${thisMutex##*/}"


#----------------
# we have control so remove any hung/failed jobs that were being run
# by a previous queueRunner with the same qrNum
#----------------
$RM -f $queueDir/mx_${qrNum}_*
cleanup () {
    $RM -f $queueDir/mx_${qrNum}_*
    $RM -f $thisMutex
}
trap cleanup 0 SIGHUP SIGINT SIGQUIT SIGTERM


#----------------
# get the head of the queue
#----------------
firstQueuedJobPath=`$LS $queueDir/qj_* 2>/dev/null | $HEAD -1`
if [ -z "$firstQueuedJobPath" ]; then
    [ "$VERBOSE" ] && $ECHO "queueRunner_$qrNum (pid=$$) queue is empty - exiting"
    $RM -f $thisMutex
    exit 0
fi
[ "$VERBOSE" ] && $ECHO "queueRunner_$qrNum (pid=$$) queue head is ${firstQueuedJobPath##*/}"


#----------------
# rename it to ensure that we have exclusive control of the entry
#----------------
mxqj="$queueDir/mx_${qrNum}_${firstQueuedJobPath##*/}"
$MV "$firstQueuedJobPath" "$mxqj" 2>/dev/null
if [ ! -f "$mxqj" ]; then
    [ "$VERBOSE" ] && $ECHO "queueRunner_$qrNum (pid=$$) competing queue runner took head; restarting"
    $RM -f $thisMutex
    exec $0 `[ "$VERBOSE" ] && $ECHO "-v"` ${qrNum}
fi
[ "$VERBOSE" ] && $ECHO "queueRunner_$qrNum (pid=$$) has dequeued head as ${mxqj##*/}"


#----------------
# now we have a queue entry so run it
#----------------
jobDir=`  $SED -n -e '/^jobDir:/!d;   s/^[^[:blank:]]*[[:blank:]]*//p' "${mxqj}"`
jobFile=` $SED -n -e '/^jobFile:/!d;  s/^[^[:blank:]]*[[:blank:]]*//p' "${mxqj}"`
modName=` $SED -n -e '/^modName:/!d;  s/^[^[:blank:]]*[[:blank:]]*//p' "${mxqj}"`
jobParms=`$SED -n -e '/^jobParms:/!d; s/^[^[:blank:]]*[[:blank:]]*//p' "${mxqj}"`

if [ -z "$modName" ]; then
    [ -f ${jobDir}/$JOB_CONTROL ]                    && . ${jobDir}/$JOB_CONTROL
    [ -f ${jobDir}/${jobFile}${JOB_CONTROL_SUFFIX} ] && . ${jobDir}/${jobFile}${JOB_CONTROL_SUFFIX}

    modListPath=${jobDir}/${jobFile}${JOB_MODLIST_SUFFIX}
    [ "$VERBOSE" ] && $ECHO "queueRunner_$qrNum (pid=$$)" \
        ${jobDir}/${jobFile} -j ${modListPath} $jobParms $JOB_EXTRA_PARMS
    ${jobDir}/${jobFile} -j ${modListPath} $jobParms $JOB_EXTRA_PARMS
    rc=$?

    if [ $rc -eq 0 ]; then
        #sucessful so save jobParms in modList
        parmString=`$ECHO "" | makeAssignment "jobParms" "$jobParms"`
        $SED -i "" -e "s/$/ ${parmString}/" ${modListPath}
    fi

else
    [ -f ${jobDir}/$JOB_CONTROL ]                               && . ${jobDir}/$JOB_CONTROL
    [ -f ${jobDir}/${jobFile}${JOB_CONTROL_SUFFIX} ]            && . ${jobDir}/${jobFile}${JOB_CONTROL_SUFFIX}
    [ -f ${jobDir}/${jobFile}.${modName}${JOB_CONTROL_SUFFIX} ] && . ${jobDir}/${jobFile}.${modName}${JOB_CONTROL_SUFFIX} 

    [ "$VERBOSE" ] && $ECHO "queueRunner_$qrNum (pid=$$)" \
        ${jobDir}/${jobFile} -s "$modName" $jobParms $JOB_EXTRA_PARMS
    ${jobDir}/${jobFile} -s "$modName" $jobParms $JOB_EXTRA_PARMS
    rc=$?
fi


#----------------
# append a status entry to the status file
#----------------
statusDir="${jobDir}/${jobFile}${JOB_STATUS_DIR_SUFFIX}"
statusPath="${statusDir}/${modName:-$JOB_MODLIST_STATUS}" 
statLine=`$SORT $statusPath 2>/dev/null | $TAIL -1`
lastSuccessDate=`$ECHO "$statLine" | parseAssignment lastSuccessDate`
lastFailureDate=`$ECHO "$statLine" | parseAssignment lastFailureDate`
statLine=`$ECHO "$timeStamp" | makeAssignment curDate $timeStamp`
if [ "$rc" -eq 0 ]; then
    [ "$VERBOSE" ] && $ECHO "queueRunner_$qrNum (pid=$$) success - updating status"
    statLine=`$ECHO "$statLine" | makeAssignment curState SUCCESS`
    statLine=`$ECHO "$statLine" | makeAssignment lastSuccessDate      $timeStamp`
    statLine=`$ECHO "$statLine" | makeAssignment lastFailureDate      $lastFailureDate`
else
    [ "$VERBOSE" ] && $ECHO "queueRunner_$qrNum (pid=$$) failure - updating status"
    statLine=`$ECHO "$statLine" | makeAssignment curState FAILURE`
    statLine=`$ECHO "$statLine" | makeAssignment lastSuccessDate      $lastSuccessDate`
    statLine=`$ECHO "$statLine" | makeAssignment lastFailureDate      $timeStamp`
fi
$MKDIR -p $statusDir    #ensure that the job status dir exists
$ECHO "$statLine" >> $statusPath


#----------------
# dequeue completed job and cleanup
#----------------
cleanup
trap - 0 SIGHUP SIGINT SIGQUIT SIGTERM


#----------------
# restart next instance of this queueRunner
#----------------
if [ ! "$DEBUG" ]; then
    [ "$VERBOSE" ] && $ECHO "queueRunner_$qrNum (pid=$$) exec'ing new instance."
    exec $0 `[ "$VERBOSE" ] && $ECHO "-v"` ${qrNum}
fi

