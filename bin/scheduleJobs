#! /usr/local/bin/bash

###############################################################################
# This script finds jobs that haven't successfully run within a prescribed
# time interval and queues them for execution
#
###############################################################################
# Jobs
#   Implemented as runnable files (typically shell scripts) within directories
#   subordinate to JOB_ROOT.  Jobs will be managed if they are executable and
#   located in a direcotry that also contains a JOB_CONTROL file.
#
# Job ModList
#   Associated with each job is a modList file named the same as the jobFile
#   but with $JOB_MODLIST_SUFFIX appended.
#   The modification date of this modList file is used to indicate how recently
#   the job ran. If present it will contain the module list as supplied by
#   the target host.
#   
#   When present (and recent) each module listed will be checked to see that it
#   has had a successful completion within the JOB_INTERVAL (specified in the
#   JOB_CONTROL file). If not it will be scheduled (enqueued) to run.  Failed
#   jobs will only be re-scheduled after a minimum wait of JOB_RETRY_INTERVAL.
#
# Job Status
#   Associated with each job is a status directory named the same as the jobFile
#   but with $JOB_STATUS_DIR_SUFFIX appended.
#   Within this directory there will be one status file for each module that has
#   been previously queued and run.  After each run of the job a line will be
#   appended with the job's completion status and some additional job control
#   information.
#
#   These status files are examined by this script to determine whether a job
#   should be enqueued or not.
#
#   Additionally these status files are used by the 'showStatus' command
#   to when listing the m st recent succes, failure, and runtime of each job. 
###############################################################################


###############################################################################
# include user defined globals and the common library
###############################################################################
. ${0%/*}/../etc/server.conf
. ${0%/*}/common.lib

# redefine $SUDO to include the configured user
if [ -n "$SUDO_USER" ]; then
    SUDO="$SUDO -u $SUDO_USER"
fi


###############################################################################
# globals
###############################################################################
LAST_MODIFIED_DATE='2013.10.04'


###############################################################################
# process options
###############################################################################
printMiniUsage() {
    $ECHO "Usage: $0 [-v]"
}

printFullUsage() {
    $ECHO "###############################################################################"
    $ECHO "# scheduleJobs (part of the backupGT suite)"
    $ECHO "# Author: Garry Thuna"
    $ECHO "# Created: 11/10/2009"
    $ECHO "# Last modified: ${LAST_MODIFIED_DATE}"
    $ECHO "###############################################################################"
    printMiniUsage
    $ECHO "   search the JOB_ROOT for job files that have not successfully completed"
    $ECHO "   within their prescribed JOB_INTERVAL (as specified in the JOB_CONTROL"
    $ECHO "   file to be found in the same directory as the job file) and queue them"
    $ECHO "   to run."
    $ECHO ""
    $ECHO "Options:"
    $ECHO "  -v  verbose: prints detail of processing to stdout. "
}


parseOptions() {
    while getopts ":v" arg; do
        case $arg in
            v) VERBOSE="1" ;;
            :) printFullUsage 1>&2
               $ECHO "Option -${OPTARG} requires an argument." 1>&2
               exit 1
               ;;
            *) printFullUsage 1>&2
               $ECHO "Option -${OPTARG} not recognized as a valid option." 1>&2
               exit 1
               ;;
        esac
    done
    COMMAND_LINE_PARMS=( "${@:$OPTIND}" )  #save rest of command line as array
}


#------
# determine if a module should be queued based on examination of status files
#------
needToQueue () {
    local jobPath="$1"
    local modName="$2"
    local needed 

    local statusDir="${jobPath}${JOB_STATUS_DIR_SUFFIX}"
    local statusPath="${statusDir}/${modName}"
    local statLine=`$SORT $statusPath 2>/dev/null | $TAIL -1`

    local runState=`       $ECHO "$statLine" | parseAssignment runState`
    local lastSuccessDate=`$ECHO "$statLine" | parseAssignment lastSuccessDate`
    local lastFailureDate=`$ECHO "$statLine" | parseAssignment lastFailureDate`
            
    case x$runState in
        xSUCCESS)
            if isDateStampTooOld $lastSuccessDate $JOB_INTERVAL; then
                needed=0  #true
                [ "$VERBOSE" ] && $ECHO "          . ENQUEUE: runState=$runState too old (job interval $JOB_INTERVAL)"
            
            else
                needed=1  #false
                [ "$VERBOSE" ] && $ECHO "          . runState=$runState sufficiently recent (job interval $JOB_INTERVAL)"
            fi
            ;;
        xFAILURE)
            if [ 0"$JOB_RETRY_INTERVAL" -eq 0 ]; then
                needed=1  #false
                [ "$VERBOSE" ] && $ECHO "          . runState=$runState but retry on failure disabled (JOB_RETRY_INTERVAL=0)"
            else
                if isDateStampTooOld $lastFailureDate $JOB_RETRY_INTERVAL; then
                    needed=0  #true
                    [ "$VERBOSE" ] && $ECHO "          . ENQUEUE: runState=$runState retry interval $JOB_RETRY_INTERVAL expired"
                else
                    needed=1  #false
                    [ "$VERBOSE" ] && $ECHO "          . runState=$runState too recent (retry interval $JOB_RETRY_INTERVAL)"
                fi
            fi
            ;;
        xRESET)
            needed=0  #true
            [ "$VERBOSE" ] && $ECHO "          . runState=$runState"
            ;;
        xSUSPEND)
            needed=1  #false
            [ "$VERBOSE" ] && $ECHO "          . runState=$runState"
            ;;
        *)
            needed=0  #true   
            [ "$VERBOSE" ] && $ECHO "          . ENQUEUE: no prior job status"
            ;;
    esac
    return $needed
}


callEnqueue () {
    local jobPath="$1"
    local modName="$2"
    local utcWindowStart="$3"
    local utcWindowEnd="$4"
    shift 4

    ${BACKUPGT_ROOT}/bin/enqueue                  \
        `[ "$VERBOSE" ] && $ECHO "-v"`            \
        "-j" "$jobPath"                           \
        "-s" "$modName"                           \
        "-p" "$JOB_PRIORITY"                      \
        "-u" "${utcWindowStart},${utcWindowEnd}"  \
        "-c" "$JOB_NET_CHANNEL"  \
        "--" $*
    if [ $? -eq 100 ]; then
        [ "$VERBOSE" ] && $ECHO '          . attempted enqueue but job already queued'
    fi
}


###############################################################################
# main
###############################################################################
checkRunningUser
parseOptions "$@"; set -- "${COMMAND_LINE_PARMS[@]}"

# find all the job directories with a JOB_CONTROL file
$FIND $JOB_ROOT -name $JOB_CONTROL | while read jobControlFile; do
    jobDir=${jobControlFile%/*}
    [ "$VERBOSE" ] && $ECHO "job dir: ${jobDir##*/} ($jobDir)"

    # find all the jobs in the current job directory
    $LS -lL $jobDir/ | $GREP -- '^-..x' | $SED -e 's/.* //' | $SED -e 's/\*$//' | while read jobFile; do
        jobPath=${jobDir}/${jobFile}
        [ "$VERBOSE" ] && $ECHO "    job: $jobFile"

        # set default job control parameters and source the jobControl file
        JOB_INTERVAL=1440                      #set default 1 day                    used by needToQueue
        JOB_RETRY_INTERVAL=60                  #set default 1 hour                   used by needToQueue
        JOB_PRIORITY=50                        #set default medium                   used by callEnqueu
        JOB_NET_CHANNEL=${jobDir#$JOB_ROOT/}   #set default subdir of the JOB_ROOT   used by callEnqueu
        JOB_EXTRA_PARMS=""                     #set default                          passed to needToQueue
        . $jobControlFile
        [ -f "${jobPath}${JOB_CONTROL_SUFFIX}" ] && . "${jobPath}${JOB_CONTROL_SUFFIX}"
        saveJI="$JOB_INTERVAL"
        saveJR="$JOB_RETRY_INTERVAL"
        saveJP="$JOB_PRIORITY"
        saveJC="$JOB_NET_CHANNEL"
        saveJX="$JOB_EXTRA_PARMS"
        
        #----------------
        # consider the job file itself (without a module being specified)
        #----------------
        if needToQueue "$jobPath" "$JOB_MODLIST_STATUS"; then
            callEnqueue "$jobPath" "" \
                        "000000" "235959" \
                        ${COMMAND_LINE_PARMS[@]} $JOB_EXTRA_PARMS 
            continue
        fi
	recentModList="${jobPath}${JOB_MODLIST_SUFFIX}"
      
        #----------------
        # now consider the modules
        #----------------
        $CAT $recentModList 2>/dev/null | while read modName modComment; do
            [ "$VERBOSE" ] && $ECHO '        mod: ' $modName

            # set default job control parameters then source the mod specific jobControl file
            JOB_INTERVAL=$saveJI
            JOB_RETRY_INTERVAL=$saveJR
            JOB_PRIORITY=$saveJP
            JOB_NET_CHANNEL=$saveJC
            JOB_EXTRA_PARMS=$saveJX
            [ -f "${jobPath}.${modName}${JOB_CONTROL_SUFFIX}" ] && . "${jobPath}.${modName}${JOB_CONTROL_SUFFIX}" 
            [ "$VERBOSE" ] && $ECHO "               JOB_INTERVAL       = " $JOB_INTERVAL
            [ "$VERBOSE" ] && $ECHO "               JOB_RETRY_INTERVAL = " $JOB_RETRY_INTERVAL
            [ "$VERBOSE" ] && $ECHO "               JOB_PRIORITY       = " $JOB_PRIORITY
            [ "$VERBOSE" ] && $ECHO "               JOB_NET_CHANNEL    = " $JOB_NET_CHANNEL
            [ "$VERBOSE" ] && $ECHO "               JOB_EXTRA_PARMS    = " $JOB_EXTRA_PARMS

            if needToQueue "$jobPath" "$modName"; then
                utcWindowStart=`$ECHO "$modComment" | parseAssignment utcWindowStart`
                utcWindowEnd=`  $ECHO "$modComment" | parseAssignment utcWindowEnd`
                callEnqueue "$jobPath" "$modName" \
                            "${utcWindowStart:-0000}" "${utcWindowEnd:-235959}" \
                            ${COMMAND_LINE_PARMS[@]} $JOB_EXTRA_PARMS 
            fi
        done

    done
done 


